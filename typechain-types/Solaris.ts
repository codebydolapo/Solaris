/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface SolarisInterface extends utils.Interface {
  functions: {
    "acceptPayment()": FunctionFragment;
    "getAmountReceived(address)": FunctionFragment;
    "getTotalAmountReceived()": FunctionFragment;
    "owner()": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptPayment"
      | "getAmountReceived"
      | "getTotalAmountReceived"
      | "owner"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountReceived",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAmountReceived",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAmountReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "paymentReceived(address,address,uint256)": EventFragment;
    "withdrawalMade(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "paymentReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "withdrawalMade"): EventFragment;
}

export interface paymentReceivedEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type paymentReceivedEvent = TypedEvent<
  [string, string, BigNumber],
  paymentReceivedEventObject
>;

export type paymentReceivedEventFilter = TypedEventFilter<paymentReceivedEvent>;

export interface withdrawalMadeEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type withdrawalMadeEvent = TypedEvent<
  [string, string, BigNumber],
  withdrawalMadeEventObject
>;

export type withdrawalMadeEventFilter = TypedEventFilter<withdrawalMadeEvent>;

export interface Solaris extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SolarisInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptPayment(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAmountReceived(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalAmountReceived(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptPayment(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAmountReceived(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalAmountReceived(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptPayment(overrides?: CallOverrides): Promise<void>;

    getAmountReceived(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAmountReceived(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "paymentReceived(address,address,uint256)"(
      from?: null,
      to?: null,
      amount?: null
    ): paymentReceivedEventFilter;
    paymentReceived(
      from?: null,
      to?: null,
      amount?: null
    ): paymentReceivedEventFilter;

    "withdrawalMade(address,address,uint256)"(
      from?: null,
      to?: null,
      amount?: null
    ): withdrawalMadeEventFilter;
    withdrawalMade(
      from?: null,
      to?: null,
      amount?: null
    ): withdrawalMadeEventFilter;
  };

  estimateGas: {
    acceptPayment(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAmountReceived(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAmountReceived(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptPayment(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAmountReceived(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalAmountReceived(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
